import gradio as gr
import numpy as np
import sqlite3
from datetime import datetime
from PIL import Image
from reportlab.lib.pagesizes import A4
from reportlab.pdfgen import canvas
import openpyxl
import os
import cv2
from ultralytics import YOLO

# –ó–∞–≥—Ä—É–∂–∞–µ–º –º–æ–¥–µ–ª—å YOLOv5s (–º–æ–¥–µ–ª—å –∏–∑ ultralytics)
model = YOLO('yolov5s.pt')

db_file = 'history.db'

def init_db():
    conn = sqlite3.connect(db_file)
    cursor = conn.cursor()
    cursor.execute('''
        CREATE TABLE IF NOT EXISTS history (
            id INTEGER PRIMARY KEY AUTOINCREMENT,
            filename TEXT,
            datetime TEXT,
            skateboard_count INTEGER
        )
    ''')
    conn.commit()
    conn.close()

init_db()

def detect(image):
    if isinstance(image, Image.Image):
        image = np.array(image)

    results = model(image)
    result = results[0]  # <-- –í–ê–ñ–ù–û: –±–µ—Ä—ë–º –ø–µ—Ä–≤—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç –∏–∑ —Å–ø–∏—Å–∫–∞

    names = result.names
    boxes = result.boxes
    class_ids = boxes.cls.cpu().numpy().astype(int)
    labels = [names[i] for i in class_ids]

    skateboard_count = labels.count("skateboard")

    # –†–µ–Ω–¥–µ—Ä —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞
    rendered = result.plot()
    output_img = cv2.cvtColor(rendered, cv2.COLOR_BGR2RGB)

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –≤ –ë–î
    timestamp = datetime.now().strftime("%Y-%m-%d %H:%M:%S")
    filename = f"image_{datetime.now().strftime('%H%M%S')}.jpg"

    conn = sqlite3.connect(db_file)
    cursor = conn.cursor()
    cursor.execute('INSERT INTO history (filename, datetime, skateboard_count) VALUES (?, ?, ?)',
                   (filename, timestamp, skateboard_count))
    conn.commit()
    conn.close()

    return output_img, get_stats_and_history()


def get_stats_and_history():
    conn = sqlite3.connect(db_file)
    cursor = conn.cursor()
    cursor.execute('SELECT filename, datetime, skateboard_count FROM history ORDER BY id DESC LIMIT 5')
    rows = cursor.fetchall()

    cursor.execute('SELECT COUNT(*), AVG(skateboard_count), MAX(skateboard_count) FROM history')
    total, avg, max_count = cursor.fetchone()
    conn.close()

    if total == 0:
        return "–ò—Å—Ç–æ—Ä–∏—è –ø—É—Å—Ç–∞."

    avg = round(avg, 2) if avg is not None else 0

    history_html = "<b>–ü–æ—Å–ª–µ–¥–Ω–∏–µ 5 –æ–±—Ä–∞–±–æ—Ç–æ–∫:</b><br><table border='1' style='border-collapse:collapse'><tr><th>–§–∞–π–ª</th><th>–î–∞—Ç–∞</th><th>–°–∫–µ–π—Ç–±–æ—Ä–¥—ã</th></tr>"
    for row in rows:
        history_html += f"<tr><td>{row[0]}</td><td>{row[1]}</td><td>{row[2]}</td></tr>"
    history_html += "</table><br>"

    stats_html = f"""
    <b>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:</b><br>
    –í—Å–µ–≥–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π: {total}<br>
    –°—Ä–µ–¥–Ω–µ–µ —á–∏—Å–ª–æ —Å–∫–µ–π—Ç–±–æ—Ä–¥–æ–≤: {avg}<br>
    –†–µ–∫–æ—Ä–¥ (–º–∞–∫—Å–∏–º—É–º —Å–∫–µ–π—Ç–±–æ—Ä–¥–æ–≤): {max_count}<br>
    """

    return history_html + stats_html

def clear_history():
    conn = sqlite3.connect(db_file)
    cursor = conn.cursor()
    cursor.execute('DELETE FROM history')
    conn.commit()
    conn.close()
    return None, "–ò—Å—Ç–æ—Ä–∏—è –æ—á–∏—â–µ–Ω–∞."

def export_pdf():
    pdf_file = "report.pdf"
    conn = sqlite3.connect(db_file)
    cursor = conn.cursor()
    cursor.execute('SELECT filename, datetime, skateboard_count FROM history ORDER BY id DESC')
    rows = cursor.fetchall()
    conn.close()

    c = canvas.Canvas(pdf_file, pagesize=A4)
    width, height = A4
    c.setFont("Helvetica-Bold", 16)
    c.drawString(50, height - 50, "–û—Ç—á—ë—Ç –ø–æ —Å–∫–µ–π—Ç–±–æ—Ä–¥–∞–º")

    c.setFont("Helvetica", 12)
    y = height - 100
    if not rows:
        c.drawString(50, y, "–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö.")
    else:
        for row in rows:
            line = f"–§–∞–π–ª: {row[0]} | –î–∞—Ç–∞: {row[1]} | –°–∫–µ–π—Ç–±–æ—Ä–¥—ã: {row[2]}"
            c.drawString(50, y, line)
            y -= 20
            if y < 50:
                c.showPage()
                y = height - 50
    c.save()
    return pdf_file

def export_excel():
    xls_file = "report.xlsx"
    wb = openpyxl.Workbook()
    ws = wb.active
    ws.append(["–§–∞–π–ª", "–î–∞—Ç–∞", "–°–∫–µ–π—Ç–±–æ—Ä–¥—ã"])

    conn = sqlite3.connect(db_file)
    cursor = conn.cursor()
    cursor.execute('SELECT filename, datetime, skateboard_count FROM history ORDER BY id DESC')
    rows = cursor.fetchall()
    conn.close()

    for row in rows:
        ws.append(row)

    wb.save(xls_file)
    return xls_file

with gr.Blocks() as app:
    gr.Markdown("# üéØ –ö–æ–Ω—Ç—Ä–æ–ª—å –∫–∞—Ç–∞–Ω–∏—è –Ω–∞ —Å–∫–µ–π—Ç–±–æ—Ä–¥–µ")

    with gr.Tab("–û–±—Ä–∞–±–æ—Ç–∫–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π"):
        with gr.Row():
            with gr.Column():
                img_input = gr.Image(type="pil", label="–ó–∞–≥—Ä—É–∑–∏—Ç–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ")
                btn = gr.Button("–û–±—Ä–∞–±–æ—Ç–∞—Ç—å")
                clear_btn = gr.Button("–û—á–∏—Å—Ç–∏—Ç—å –∏—Å—Ç–æ—Ä–∏—é")
            with gr.Column():
                img_output = gr.Image(type="numpy", label="–†–µ–∑—É–ª—å—Ç–∞—Ç")
                stats_output = gr.HTML(label="–ò—Å—Ç–æ—Ä–∏—è –∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞")

        btn.click(detect, inputs=img_input, outputs=[img_output, stats_output])
        clear_btn.click(clear_history, inputs=None, outputs=[img_output, stats_output])

    with gr.Tab("–û—Ç—á—ë—Ç—ã"):
        gr.Markdown("–°–∫–∞—á–∞—Ç—å –æ—Ç—á—ë—Ç—ã —Å –∏—Å—Ç–æ—Ä–∏–µ–π –æ–±—Ä–∞–±–æ—Ç–∫–∏:")
        pdf_btn = gr.Button("–°–∫–∞—á–∞—Ç—å PDF")
        excel_btn = gr.Button("–°–∫–∞—á–∞—Ç—å Excel")
        pdf_file = gr.File()
        excel_file = gr.File()

        pdf_btn.click(export_pdf, outputs=pdf_file)
        excel_btn.click(export_excel, outputs=excel_file)

if __name__ == "__main__":
    print("üü¢ App started")
    app.launch(server_name="0.0.0.0", server_port=7860)


